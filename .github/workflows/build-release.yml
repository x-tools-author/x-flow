name: build-release
on:
  push:
    tags:
      - 'v*'
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  QT_VERSION: 6.8.3
  QT_MODULES: 'qtcharts qtserialbus qtserialport qtwebsockets'

jobs:
  update-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Delete Release
      run: |
        gh release delete ${{ github.ref_name }} -y || true
    - name: Create Release
      run: |
        gh release create ${{ github.ref_name }} --title "Release ${{ github.ref_name }}" --notes "The version is ready. You can see the changed log: https://github.com/x-tools-author/x-tools/blob/master/res/files/history.txt"
  release-for-windows:
    runs-on: windows-2022
    needs: update-release
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        # 切换至最新的tag，格式为v开头的版本号
        ref: ${{ github.ref }}
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '${{ env.QT_VERSION }}'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        dir: '${{ github.workspace }}'
        modules: '${{env.QT_MODULES}}'
    - name: Build for Windows
      shell: cmd
      run: |
        git fetch --tags
        mkdir build
        cd build
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
        cmake -DCMAKE_PREFIX_PATH='${{ github.workspace }}/Qt/${{env.QT_VERSION}}/win64_msvc2022_64' -DCMAKE_BUILD_TYPE=Release -G "Ninja" ../
        cmake --build . --target xTools
        cmake --build . --target xTools_zip
    - name: Upload Release Asset for Windnows
      shell: cmd
      run: |
        for %%f in (bin\Windows\Release\xTools-zip\*.zip) do gh release upload ${{ github.ref_name }} "%%f"
  release-for-linux:
    runs-on: ubuntu-22.04
    needs: update-release
    env:
      DOCKER_IMAGE: ghcr.io/x-tools-author/x-tools-ubuntu-20.04:x86_64
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}  # 切换至最新的tag，格式为v开头的版本号
    - name: Build for Linux
      run: |
          git fetch --tags
          docker run --rm --privileged -v ${{ github.workspace }}:/workspace ${{ env.DOCKER_IMAGE }} /bin/bash -c "\
          cd /workspace && chmod +x ./scripts/ci-build-ubuntu-20.04.sh && ./scripts/ci-build-ubuntu-20.04.sh"
    - name: Upload Release Asset for Linux
      run: |
        dir bin/Linux/Release
        find bin/Linux/Release/xTools-linux -name "*.deb" -exec gh release upload  ${{ github.ref_name }} {} \;
        find bin/Linux/Release/xTools-linux -name "*.AppImage" -exec gh release upload  ${{ github.ref_name }} {} \;
  release-for-macos:
    runs-on: macos-14
    needs: update-release
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        # 切换至最新的tag，格式为v开头的版本号
        ref: ${{ github.ref }}
    - name: Install Qt for macOS
      uses: jurplel/install-qt-action@v4
      with:
        version: '${{env.QT_VERSION}}'
        target: 'desktop'
        arch: 'clang_64'
        dir: ${{ github.workspace }}
        modules: 'qtcharts qtserialbus qtserialport qtwebsockets'
    - name: Build for macOS
      # 278ERROR: no file at "/usr/local/opt/libiodbc/lib/libiodbc.2.dylib"
      # brew unlink unixodbc
      # brew install libiodbc
      # ERROR: no file at "/Applications/Postgres.app/Contents/Versions/14/lib/libpq.5.dylib"
      # ln -s /usr/local/Cellar/postgresql@14/14.10/lib/postgresql@14/libpq.5.14.dylib /Applications/Postgres.app/Contents/Versions/14/lib/libpq.5.dylib
      run: |
        git fetch --tags
        # brew unlink unixodbc
        # brew install libiodbc
        mkdir -p /Applications/Postgres.app/Contents/Versions/14/lib
        ln -s /usr/local/Cellar/postgresql@14/14.10/lib/postgresql@14/libpq.5.14.dylib /Applications/Postgres.app/Contents/Versions/14/lib/libpq.5.dylib
        mkdir build
        cd build
        cmake ../ -DCMAKE_PREFIX_PATH='${{ github.workspace }}/Qt/${{env.QT_VERSION}}/clang_64/lib/cmake/Qt6' -DCMAKE_BUILD_TYPE:STRING=Release
        cmake --build . --target xTools
        cmake --build . --target xTools_dmg
    - name: Upload Release Asset for macOS
      run: |
        ls bin/Darwin/Release/xTools
        find bin/Darwin/Release/xTools -name "*.dmg" -exec gh release upload ${{ github.ref_name }} {} \;
  release-for-android:
    runs-on: windows-2022
    needs: update-release
    env:
      QT_ANDROID_KEYSTORE_PATH: ${{ github.workspace }}\res\android\android_release.keystore
      QT_ANDROID_KEYSTORE_ALIAS: ${{ secrets.ANDROID_KEYSTORE_ALIAS }}
      QT_ANDROID_KEYSTORE_STORE_PASS: ${{ secrets.ANDROID_KEYSTORE_STORE_PASS }}
      QT_ANDROID_KEYSTORE_KEY_PASS: ${{ secrets.ANDROID_KEYSTORE_KEY_PASS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # 切换至最新的tag，格式为v开头的版本号
          ref: ${{ github.ref }}
      - name: Install Qt for Android
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==3.1.*'
          target: android
          arch: android_armv7
          host: windows
          dir: ${{ github.workspace }}
          modules: ${{env.QT_MODULES}}
          version: ${{env.QT_VERSION}}
      - name: Install Qt for Desktop(mingw)
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==3.1.*'
          target: desktop
          arch: win64_mingw
          host: windows
          dir: ${{ github.workspace }}
          modules: ${{env.QT_MODULES}}
          version: ${{env.QT_VERSION}}
      - name: CMake for Android
        shell: cmd
        run: |
          git fetch --tags
          set JAVA_HOME=%JAVA_HOME_17_X64%
          ${{ github.workspace }}\Qt\${{env.QT_VERSION}}\android_armv7\bin\qt-cmake.bat ^
          -G "MinGW Makefiles" ^
          -S . ^
          -B "build\armeabi_v7a" ^
          -DQT_HOST_PATH:PATH="${{ github.workspace }}\Qt\${{env.QT_VERSION}}\mingw_64" ^
          -DCMAKE_BUILD_TYPE:STRING=Release ^
          -DCMAKE_CXX_COMPILER:FILEPATH="%ANDROID_NDK_ROOT%/toolchains/llvm/prebuilt/windows-x86_64/bin/clang++.exe" ^
          -DANDROID_SDK_ROOT:PATH="%ANDROID_SDK_ROOT%" ^
          -DANDROID_NDK_ROOT:PATH="%ANDROID_NDK_ROOT%" ^
          -DBUILD_SHARED_LIBS:BOOL=OFF ^
          -DWITH_TOOLS:BOOL=OFF ^
          -DWITHOUT_PNG:BOOL=ON
      - name: Build for android
        shell: cmd
        run: |
          set JAVA_HOME=%JAVA_HOME_17_X64%
          echo %JAVA_HOME%
          cmake --build build\armeabi_v7a --target xTools --config Release
      - name: Copy File for Deploy
        shell: cmd
        run: |
            mkdir  build\armeabi_v7a\android-build\libs\armeabi-v7a
            dir build\armeabi_v7a
            copy .\build\armeabi_v7a\libxTools_armeabi-v7a.so .\build\armeabi_v7a\android-build\libs\armeabi-v7a /y
      - name: Deploy for Android
        shell: cmd
        run: |
          set JAVA_HOME=%JAVA_HOME_17_X64%
          echo %JAVA_HOME%
          ${{ github.workspace }}\Qt\${{env.QT_VERSION}}\mingw_64\bin\androiddeployqt.exe ^
          --input build\armeabi_v7a\android-xTools-deployment-settings.json ^
          --output build\armeabi_v7a\android-build ^
          --android-platform android-35 ^
          --sign ${{ env.QT_ANDROID_KEYSTORE_PATH }} ${{ env.QT_ANDROID_KEYSTORE_ALIAS }} --storepass  ${{ env.QT_ANDROID_KEYSTORE_STORE_PASS }}  --keypass ${{ env.QT_ANDROID_KEYSTORE_KEY_PASS }} ^
          --jdk %JAVA_HOME% --gradle --release
      - name: Upload Release Asset for Android
        run: |
          cmake -E copy build/armeabi_v7a/android-build/build/outputs/apk/release/android-build-release-signed.apk xtools-android-${{ github.ref_name }}-armeabi_v7a.apk
          ls && tree build/armeabi_v7a && gh release upload ${{ github.ref_name }} xtools-android-${{ github.ref_name }}-armeabi_v7a.apk
