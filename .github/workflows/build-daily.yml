name: build-daily
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch: # Enables manually
# on:
#  push:
#    branches:
#      - master

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  QT_VERSION: 6.8.3
  QT_MODULES: 'qtcharts qtserialbus qtserialport qtwebsockets'
  DOCKER_IMAGE: ghcr.io/x-tools-author/x-tools-ubuntu-20.04:x86_64

jobs:
  update-tag:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Update continuous tag
      run: |
        git config --global user.email "x-tools@outlook.com"
        git config --global user.name "x-tools-author"
        git tag -d continuous || true
        git push origin :refs/tags/continuous
        git tag continuous
        git push origin continuous -f
  update-release:
    runs-on: ubuntu-latest
    needs: update-tag
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Delete Release
      run: |
        gh release delete continuous -y || true
    - name: Create Release
      run: |
        gh release create continuous --title "Continuous Build" --notes "Daily build of xFlow"
  release-for-windows:
    runs-on: windows-2022
    needs: update-release
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '${{ env.QT_VERSION }}'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        dir: '${{ github.workspace }}'
        modules: '${{env.QT_MODULES}}'
    - name: Build for Windows
      shell: cmd
      run: |
        git fetch --tags
        mkdir build
        cd build
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
        cmake -DCMAKE_PREFIX_PATH='${{ github.workspace }}/Qt/${{env.QT_VERSION}}/win64_msvc2022_64' -DCMAKE_BUILD_TYPE=Release -G "Ninja" ../
        cmake --build . --target xFlow
        cmake --build . --target xFlow_zip
    - name: Upload Release Asset for Windnows
      shell: cmd
      run: |
        for %%f in (bin\Windows\Release\xFlow-zip\*.zip) do gh release upload continuous "%%f"
  release-for-linux:
    runs-on: ubuntu-22.04
    needs: update-release
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Build for Linux
      run: |
        git fetch --tags
        docker run --rm --privileged -v ${{ github.workspace }}:/workspace ${{ env.DOCKER_IMAGE }} /bin/bash -c "\
        cd /workspace && chmod +x ./scripts/ci-build-ubuntu-20.04.sh && ./scripts/ci-build-ubuntu-20.04.sh"
    - name: Upload Release Asset for Linux
      run: |
        dir bin/Linux/Release
        find bin/Linux/Release/xFlow-linux -name "*.deb" -exec gh release upload continuous {} \;
        find bin/Linux/Release/xFlow-linux -name "*.AppImage" -exec gh release upload continuous {} \;
  release-for-macos:
    runs-on: macos-14
    needs: update-release
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install Qt for macOS
      uses: jurplel/install-qt-action@v4
      with:
        version: '${{env.QT_VERSION}}'
        target: 'desktop'
        arch: 'clang_64'
        dir: ${{ github.workspace }}
        modules: 'qtcharts qtserialbus qtserialport qtwebsockets'
    - name: Build for macOS
      # 278ERROR: no file at "/usr/local/opt/libiodbc/lib/libiodbc.2.dylib"
      # brew unlink unixodbc
      # brew install libiodbc
      # ERROR: no file at "/Applications/Postgres.app/Contents/Versions/14/lib/libpq.5.dylib"
      # ln -s /usr/local/Cellar/postgresql@14/14.10/lib/postgresql@14/libpq.5.14.dylib /Applications/Postgres.app/Contents/Versions/14/lib/libpq.5.dylib
      run: |
        git fetch --tags
        # brew unlink unixodbc
        # brew install libiodbc
        mkdir -p /Applications/Postgres.app/Contents/Versions/14/lib
        ln -s /usr/local/Cellar/postgresql@14/14.10/lib/postgresql@14/libpq.5.14.dylib /Applications/Postgres.app/Contents/Versions/14/lib/libpq.5.dylib
        mkdir build
        cd build
        cmake ../ -DCMAKE_PREFIX_PATH='${{ github.workspace }}/Qt/${{env.QT_VERSION}}/clang_64/lib/cmake/Qt6' -DCMAKE_BUILD_TYPE:STRING=Release
        cmake --build . --target xFlow
        cmake --build . --target xFlow_dmg
    - name: Upload Release Asset for macOS
      run: |
        ls bin/Darwin/Release/xFlow
        find bin/Darwin/Release/xFlow -name "*.dmg" -exec gh release upload continuous {} \;
